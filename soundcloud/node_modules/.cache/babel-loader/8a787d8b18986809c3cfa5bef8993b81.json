{"ast":null,"code":"var _jsxFileName = \"/Users/albertson/OneDrive - Washington University in St. Louis/CS330 pt2/React-Music-Player/soundcloud/src/home.js\";\nimport React, { Component } from 'react';\nimport fire from './config/fire';\nimport './App.css';\nimport Audio from './audio';\nimport Delete from './delete';\nimport Like from './like';\nimport Liked from './liked';\nimport $ from 'jquery';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props); // Set state\n\n    this.state = {\n      file: null,\n      audio: [],\n      isLoading: false,\n      isUploading: false,\n      likes: [],\n      filtered: []\n    }; // Followed firebase authentication tutorial at https://www.youtube.com/watch?v=r4EsP6rovwk\n    // Bind all functions to this\n\n    this.logout = this.logout.bind(this);\n    this.upload = this.upload.bind(this);\n    this.onChangeFile = this.onChangeFile.bind(this);\n    this.getAudio = this.getAudio.bind(this);\n    this.delete = this.delete.bind(this);\n    this.edit = this.edit.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.like = this.like.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    // Stops page from rerendering until all music files have been loaded by this.getAudio()\n    this.setState({\n      isLoading: true\n    }); // Gets all music files to display on page\n\n    this.getAudio();\n  }\n\n  logout() {\n    // Followed firebase authentication tutorial at https://www.youtube.com/watch?v=r4EsP6rovwk\n    fire.auth().signOut();\n  }\n\n  onChangeFile(file) {\n    // Sets state when user chooses a file to upload\n    this.setState({\n      file\n    });\n  }\n\n  upload() {\n    // Makes sure that a file is selected before uploading file\n    if (this.state.file != null) {\n      // Stops page from rerendering until file has been successfully uploaded\n      this.setState({\n        isUploading: true\n      });\n      const current = this;\n      const file = this.state.file[0]; // Set storage and database references using currently logged in user's uid\n      // Creates a user's folder within the database if current user's own folder doesn't exist, but if it already exists, it will put the uploaded file into the user specific directory\n\n      const storageRef = fire.storage().ref(fire.auth().currentUser.uid);\n      const db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid); // Checks to see if file name already exists in user's folder\n      // Because Firebase API can only request a file that exists, checking for a non-existent file is handled as an error\n      // This is why a Promise error is needed as a condition for inserting music files\n\n      storageRef.child(file.name).getDownloadURL().then(onResolve, onReject); // If promise function resolves, that means file exists\n\n      function onResolve(foundURL) {\n        alert(\"Filename already exists\");\n        current.setState({\n          isUploading: false\n        });\n      } // If promise function doesn't resolve, then file doesn't exist and we can upload our new file\n\n\n      function onReject(error) {\n        // Set file reference for storage\n        const fileRef = storageRef.child(file.name); // Puts file into storage\n\n        fileRef.put(file).then(() => {\n          console.log(\"Uploaded file: \" + file.name); // Gets download url of the newly uploaded file to add to the database\n\n          storageRef.child(file.name).getDownloadURL().then(url => {\n            // Generates a new key for the doc that is about to be uploaded from Firebase documentation\n            let newPostKey = db.push().key; // Set database doc with name, url, key, parent, user, and original\n\n            db.child(newPostKey).set({\n              name: file.name.substring(0, file.name.lastIndexOf('.')),\n              url: url,\n              key: newPostKey,\n              parent: fire.auth().currentUser.uid,\n              user: fire.auth().currentUser.email,\n              original: file.name\n            }); // console.log(current.state.audio);\n\n            current.setState({\n              isUploading: false\n            });\n          });\n        });\n      } // Clears the file upload button of the previous file\n\n\n      document.getElementById(\"fileUpload\").value = \"\";\n    } else {\n      // Notifies user to select a file\n      alert(\"Please select a file to upload\");\n    }\n  }\n\n  handleEdit(e) {\n    // Hides the span element that contains the song name\n    e.target.classList.add(\"hidden\"); // Reveals a text input form  \n\n    e.target.nextElementSibling.classList.remove(\"hidden\"); // Reveals an edit button to submit new name for song\n\n    e.target.nextElementSibling.nextElementSibling.classList.remove(\"hidden\"); // Reveals a cancel button to cancel editing\n\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hidden\");\n  }\n\n  edit(e) {\n    // Checks to see if user clicked on the edit button or the cancel button\n    if (e.target.classList.contains(\"fa-edit\")) {\n      // Gets the song's unique key that was generated when uploaded to Firebase database\n      let key = e.target.parentElement.parentElement.id; // Gets the new name for the song from the input element\n\n      let fileName = e.target.previousElementSibling.value; // Set database reference to user specific folder and song that wants to be edited\n\n      let db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid + \"/\" + key); // Sets the key \"name\" with the new song name \n\n      db.child(\"name\").set(fileName).then(function () {\n        console.log(\"File renamed\");\n      }).catch(function (error) {\n        console.log(\"Edit failed: \" + error.message);\n      }); // Hides the cancel button\n\n      e.target.nextElementSibling.classList.add(\"hidden\"); // Hides itself\n\n      e.target.classList.add(\"hidden\"); // Hides the input form\n\n      e.target.previousElementSibling.classList.add(\"hidden\"); // Reveals the span containing the new name of the song\n\n      e.target.previousElementSibling.previousElementSibling.classList.remove(\"hidden\");\n    } else {\n      // Hides the cancel button\n      e.target.classList.add(\"hidden\"); // Hides the edit button\n\n      e.target.previousElementSibling.classList.add(\"hidden\"); // Hides the input form\n\n      e.target.previousElementSibling.previousElementSibling.classList.add(\"hidden\"); // Reveals the span containing the original name of the song\n\n      e.target.previousElementSibling.previousElementSibling.previousElementSibling.classList.remove(\"hidden\");\n    }\n  }\n\n  delete(e) {\n    // Gets the song name that needs to be deleted\n    let fileName = e.target.title; // Gets the unique key for the song from the <li> element\n\n    let key = e.target.parentElement.parentElement.id; // Sets database and storage reference\n\n    const fileRef = fire.storage().ref(fire.auth().currentUser.uid + \"/\" + fileName);\n    const db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid + \"/\" + key); // Removes the reference in the database and then removes the file from the storage\n\n    db.remove().then(function () {\n      fileRef.delete().then(function () {\n        console.log(\"File Deleted!\");\n      }).catch(function (error) {\n        console.log(\"Remove file failed: \" + error.message);\n      });\n    }).catch(function (error) {\n      console.log(\"Remove db failed: \" + error.message);\n    });\n    fire.database().ref(\"likes/\" + key).remove().then(function () {\n      console.log(\"Likes removed\");\n    }).catch(function (error) {\n      console.log(\"Remove likes failed: \" + error.message);\n    });\n  }\n\n  like(e) {\n    let key = e.target.parentElement.parentElement.id;\n    let songName = e.target.parentElement.parentElement.getAttribute(\"name\");\n    const db = fire.database().ref(\"likes/\" + key); // Check if it hasnt been liked yet, then like it\n\n    if (e.target.classList.contains(\"fa-thumbs-o-up\")) {\n      e.target.classList.remove(\"fa-thumbs-o-up\");\n      e.target.classList.add(\"fa-thumbs-up\");\n      db.child(fire.auth().currentUser.uid).set(songName).then(function () {\n        console.log(\"Liked\");\n      }).catch(function (error) {\n        console.log(\"Cannot like: \" + error.message);\n      });\n    } // If it has already been liked by user, unlike\n    else {\n        e.target.classList.remove(\"fa-thumbs-up\");\n        e.target.classList.add(\"fa-thumbs-o-up\");\n        db.child(fire.auth().currentUser.uid).remove().then(function () {\n          console.log(\"Unliked\");\n        }).catch(function (error) {\n          console.log(\"Cannot unlike: \" + error.message);\n        });\n      }\n  }\n\n  handleSearch(e) {\n    // Gets the input value in the search bar dynamically\n    let search = $(\"#search\").val(); // Sets state of filtered from this.state.audio with song names that only match the search query\n    // Code from https://stackoverflow.com/questions/36326612/delete-item-from-state-array-in-react\n\n    this.setState({\n      filtered: this.state.audio.filter(function (song) {\n        if (song.name.toLowerCase().includes(search)) {\n          return song;\n        }\n      })\n    });\n  }\n\n  render() {\n    // Code to display loading while data is being fetched from https://stackoverflow.com/questions/55359176/handling-undefined-null-properties-in-components-during-first-render\n    if (this.state.isLoading) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } // Code to display uploading while file is being uploaded to storage\n\n\n    if (this.state.isUploading) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 14\n        }\n      }, \"Uploading...\");\n    } // console.log(this.state.audio);\n    // console.log(this.state.filtered);\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }, \"React Player\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.logout,\n      id: \"logout\",\n      className: \"btn btn-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }\n    }, \"Logout\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"search\",\n      defaultValue: \"\",\n      onChange: this.handleSearch,\n      placeholder: \"    Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"fileUpload\",\n      onChange: e => {\n        this.onChangeFile(e.target.files);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.upload,\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, \"Upload\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, this.state.filtered.map((song, index) => {\n      // Code for conditional rendering from https://stackoverflow.com/questions/44969877/if-condition-inside-of-map-react\n      // Checks if logged in user owns these files\n      if (song.parent === fire.auth().currentUser.uid) {\n        // Check if anyone liked this song\n        if (this.state.likes[song.key] === undefined) {\n          return /*#__PURE__*/React.createElement(React.Fragment, {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 30\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            className: \"audioFile\",\n            id: song.key,\n            name: song.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 23\n            }\n          }, /*#__PURE__*/React.createElement(Like, {\n            title: song.name,\n            onClick: this.like,\n            numLikes: 0,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"songName\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"name\",\n            onClick: this.handleEdit,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 27\n            }\n          }, song.name), /*#__PURE__*/React.createElement(\"input\", {\n            className: \"editName hidden\",\n            type: \"text\",\n            defaultValue: song.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 27\n            }\n          }), /*#__PURE__*/React.createElement(\"i\", {\n            className: \"fa fa-edit hidden\",\n            onClick: this.edit,\n            title: song.name,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 27\n            }\n          }), /*#__PURE__*/React.createElement(\"i\", {\n            className: \"fa fa-times hidden\",\n            onClick: this.edit,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 27\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 27\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"uploadedBy\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 27\n            }\n          }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n            title: song.name,\n            src: song.url,\n            user: song.parent,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(Delete, {\n            onClick: this.delete,\n            title: song.original,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 25\n            }\n          })));\n        } else {\n          // Check if currently logged in user liked this song so it can render with the like button already clicked\n          if (this.state.likes[song.key].includes(fire.auth().currentUser.uid)) {\n            return /*#__PURE__*/React.createElement(React.Fragment, {\n              key: index,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 32\n              }\n            }, /*#__PURE__*/React.createElement(\"li\", {\n              className: \"audioFile\",\n              id: song.key,\n              name: song.name,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Liked, {\n              title: song.name,\n              onClick: this.like,\n              numLikes: this.state.likes[song.key].length,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 27\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"songName\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 27\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"name\",\n              onClick: this.handleEdit,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 29\n              }\n            }, song.name), /*#__PURE__*/React.createElement(\"input\", {\n              className: \"editName hidden\",\n              type: \"text\",\n              defaultValue: song.name,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 29\n              }\n            }), /*#__PURE__*/React.createElement(\"i\", {\n              className: \"fa fa-edit hidden\",\n              onClick: this.edit,\n              title: song.name,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 29\n              }\n            }), /*#__PURE__*/React.createElement(\"i\", {\n              className: \"fa fa-times hidden\",\n              onClick: this.edit,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 29\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 29\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              className: \"uploadedBy\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 29\n              }\n            }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n              title: song.name,\n              src: song.url,\n              user: song.parent,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 27\n              }\n            }), /*#__PURE__*/React.createElement(Delete, {\n              onClick: this.delete,\n              title: song.original,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 27\n              }\n            })));\n          } // Renders without like button being clicked\n          else {\n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                key: index,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 32\n                }\n              }, /*#__PURE__*/React.createElement(\"li\", {\n                className: \"audioFile\",\n                id: song.key,\n                name: song.name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 25\n                }\n              }, /*#__PURE__*/React.createElement(Like, {\n                title: song.name,\n                onClick: this.like,\n                numLikes: this.state.likes[song.key].length,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"songName\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 27\n                }\n              }, /*#__PURE__*/React.createElement(\"span\", {\n                className: \"name\",\n                onClick: this.handleEdit,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 29\n                }\n              }, song.name), /*#__PURE__*/React.createElement(\"input\", {\n                className: \"editName hidden\",\n                type: \"text\",\n                defaultValue: song.name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 29\n                }\n              }), /*#__PURE__*/React.createElement(\"i\", {\n                className: \"fa fa-edit hidden\",\n                onClick: this.edit,\n                title: song.name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 29\n                }\n              }), /*#__PURE__*/React.createElement(\"i\", {\n                className: \"fa fa-times hidden\",\n                onClick: this.edit,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 29\n                }\n              }), /*#__PURE__*/React.createElement(\"br\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 29\n                }\n              }), /*#__PURE__*/React.createElement(\"span\", {\n                className: \"uploadedBy\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 29\n                }\n              }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n                title: song.name,\n                src: song.url,\n                user: song.parent,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(Delete, {\n                onClick: this.delete,\n                title: song.original,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 27\n                }\n              })));\n            }\n        }\n      } // Renders music without option to edit or delete\n      else {\n          // Check if anyone has already liked this song\n          if (this.state.likes[song.key] === undefined) {\n            // Returns the music file without edit or delete function because user does not own these files \n            return /*#__PURE__*/React.createElement(React.Fragment, {\n              key: index,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 30\n              }\n            }, /*#__PURE__*/React.createElement(\"li\", {\n              className: \"audioFile\",\n              id: song.key,\n              name: song.name,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 23\n              }\n            }, /*#__PURE__*/React.createElement(Like, {\n              title: song.name,\n              onClick: this.like,\n              numLikes: 0,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 25\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"songName\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              className: \"name\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 51\n              }\n            }, song.name), /*#__PURE__*/React.createElement(\"br\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 92\n              }\n            }), /*#__PURE__*/React.createElement(\"span\", {\n              className: \"uploadedBy\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 97\n              }\n            }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n              title: song.name,\n              src: song.url,\n              user: song.parent,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 25\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: \"empty\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 25\n              }\n            })));\n          } else {\n            // Check if currently logged in user has liked this song before so it can render like button already clicked\n            if (this.state.likes[song.key].includes(fire.auth().currentUser.uid)) {\n              // Returns the music file without edit or delete function because user does not own these files \n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                key: index,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 32\n                }\n              }, /*#__PURE__*/React.createElement(\"li\", {\n                className: \"audioFile\",\n                id: song.key,\n                name: song.name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 25\n                }\n              }, /*#__PURE__*/React.createElement(Liked, {\n                title: song.name,\n                onClick: this.like,\n                numLikes: this.state.likes[song.key].length,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"songName\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 27\n                }\n              }, /*#__PURE__*/React.createElement(\"span\", {\n                className: \"name\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 53\n                }\n              }, song.name), /*#__PURE__*/React.createElement(\"br\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 94\n                }\n              }), /*#__PURE__*/React.createElement(\"span\", {\n                className: \"uploadedBy\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 99\n                }\n              }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n                title: song.name,\n                src: song.url,\n                user: song.parent,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"empty\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 27\n                }\n              })));\n            } else {\n              // Returns the music file without edit or delete function because user does not own these files \n              return /*#__PURE__*/React.createElement(React.Fragment, {\n                key: index,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 32\n                }\n              }, /*#__PURE__*/React.createElement(\"li\", {\n                className: \"audioFile\",\n                id: song.key,\n                name: song.name,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 25\n                }\n              }, /*#__PURE__*/React.createElement(Like, {\n                title: song.name,\n                onClick: this.like,\n                numLikes: this.state.likes[song.key].length,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"songName\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 27\n                }\n              }, /*#__PURE__*/React.createElement(\"span\", {\n                className: \"name\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 53\n                }\n              }, song.name), /*#__PURE__*/React.createElement(\"br\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 94\n                }\n              }), /*#__PURE__*/React.createElement(\"span\", {\n                className: \"uploadedBy\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 99\n                }\n              }, \"Uploaded by: \", song.user)), /*#__PURE__*/React.createElement(Audio, {\n                title: song.name,\n                src: song.url,\n                user: song.parent,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 27\n                }\n              }), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"empty\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 27\n                }\n              })));\n            }\n          }\n        }\n    }))));\n  } // Lists all music files and likes regardless of current user\n\n\n  getAudio() {\n    let current = this; // Iterates through each user's database and gets information about every music file\n\n    fire.database().ref(\"users\").on(\"value\", function (snapshot) {\n      let audio = [];\n      snapshot.forEach(function (users) {\n        users.forEach(function (file) {\n          // Pushes each music file's info into array audio\n          audio.push({\n            name: file.val().name,\n            url: file.val().url,\n            key: file.val().key,\n            parent: file.val().parent,\n            user: file.val().user,\n            original: file.val().original\n          }); // Sets state with new info\n\n          current.setState({\n            audio: audio\n          });\n          current.setState({\n            filtered: audio\n          });\n        });\n      }); // This function gets an array of who liked which music\n\n      fire.database().ref(\"likes\").on(\"value\", function (snapshot) {\n        let likes = {};\n        snapshot.forEach(function (file) {\n          // Sets music key as dictionary key with array of users as values\n          likes[file.key] = Object.keys(file.val());\n        }); // console.log(likes);\n        // Set state\n\n        current.setState({\n          likes: likes\n        });\n      }); // console.log(current.state.likes);\n      // console.log(current.state.audio);\n\n      current.setState({\n        isLoading: false\n      });\n    });\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/albertson/OneDrive - Washington University in St. Louis/CS330 pt2/React-Music-Player/soundcloud/src/home.js"],"names":["React","Component","fire","Audio","Delete","Like","Liked","$","Home","constructor","props","state","file","audio","isLoading","isUploading","likes","filtered","logout","bind","upload","onChangeFile","getAudio","delete","edit","handleEdit","like","handleSearch","componentDidMount","setState","auth","signOut","current","storageRef","storage","ref","currentUser","uid","db","database","child","name","getDownloadURL","then","onResolve","onReject","foundURL","alert","error","fileRef","put","console","log","url","newPostKey","push","key","set","substring","lastIndexOf","parent","user","email","original","document","getElementById","value","e","target","classList","add","nextElementSibling","remove","contains","parentElement","id","fileName","previousElementSibling","catch","message","title","songName","getAttribute","search","val","filter","song","toLowerCase","includes","render","files","map","index","undefined","length","on","snapshot","forEach","users","Object","keys"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport fire from './config/fire';\nimport './App.css';\nimport Audio from './audio';\nimport Delete from './delete';\nimport Like from './like';\nimport Liked from './liked';\nimport $ from 'jquery';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    // Set state\n    this.state = {\n      file: null,\n      audio: [],\n      isLoading: false,\n      isUploading: false,\n      likes:[],\n      filtered: [],\n    }\n    // Followed firebase authentication tutorial at https://www.youtube.com/watch?v=r4EsP6rovwk\n    // Bind all functions to this\n    this.logout = this.logout.bind(this);\n    this.upload = this.upload.bind(this);\n    this.onChangeFile = this.onChangeFile.bind(this);\n    this.getAudio = this.getAudio.bind(this);\n    this.delete = this.delete.bind(this);\n    this.edit = this.edit.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.like = this.like.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    // Stops page from rerendering until all music files have been loaded by this.getAudio()\n    this.setState({isLoading: true});\n    // Gets all music files to display on page\n    this.getAudio();\n\n  }\n\n  logout() {\n    // Followed firebase authentication tutorial at https://www.youtube.com/watch?v=r4EsP6rovwk\n    fire.auth().signOut();\n  }\n\n  onChangeFile(file) {\n    // Sets state when user chooses a file to upload\n    this.setState({\n      file\n    })\n  }\n\n  upload() {\n    // Makes sure that a file is selected before uploading file\n    if (this.state.file != null) {\n      // Stops page from rerendering until file has been successfully uploaded\n      this.setState({isUploading:true});\n      const current = this;\n      const file = this.state.file[0]\n      // Set storage and database references using currently logged in user's uid\n      // Creates a user's folder within the database if current user's own folder doesn't exist, but if it already exists, it will put the uploaded file into the user specific directory\n      const storageRef = fire.storage().ref(fire.auth().currentUser.uid);\n      const db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid);\n      // Checks to see if file name already exists in user's folder\n      // Because Firebase API can only request a file that exists, checking for a non-existent file is handled as an error\n      // This is why a Promise error is needed as a condition for inserting music files\n      storageRef.child(file.name).getDownloadURL().then(onResolve, onReject);\n      // If promise function resolves, that means file exists\n      function onResolve(foundURL) {\n        alert(\"Filename already exists\");\n        current.setState({isUploading: false});\n      }\n      // If promise function doesn't resolve, then file doesn't exist and we can upload our new file\n      function onReject(error) {\n        // Set file reference for storage\n        const fileRef = storageRef.child(file.name);\n        // Puts file into storage\n        fileRef.put(file).then(() => {\n          console.log(\"Uploaded file: \" + file.name);\n          // Gets download url of the newly uploaded file to add to the database\n          storageRef.child(file.name).getDownloadURL().then(url => {\n            // Generates a new key for the doc that is about to be uploaded from Firebase documentation\n            let newPostKey = db.push().key;\n            // Set database doc with name, url, key, parent, user, and original\n            db.child(newPostKey).set({\n                name : file.name.substring(0,file.name.lastIndexOf('.')),\n                url : url,\n                key : newPostKey,\n                parent : fire.auth().currentUser.uid,\n                user : fire.auth().currentUser.email,\n                original : file.name\n            });\n            // console.log(current.state.audio);\n            current.setState({isUploading:false});\n          })\n        })\n      }\n      // Clears the file upload button of the previous file\n      document.getElementById(\"fileUpload\").value = \"\";\n    }\n    else {\n      // Notifies user to select a file\n      alert(\"Please select a file to upload\");\n    }\n    \n  } \n\n  handleEdit(e) {\n    // Hides the span element that contains the song name\n    e.target.classList.add(\"hidden\");\n    // Reveals a text input form  \n    e.target.nextElementSibling.classList.remove(\"hidden\");\n    // Reveals an edit button to submit new name for song\n    e.target.nextElementSibling.nextElementSibling.classList.remove(\"hidden\");\n    // Reveals a cancel button to cancel editing\n    e.target.nextElementSibling.nextElementSibling.nextElementSibling.classList.remove(\"hidden\");\n\n  }\n\n  edit(e) {\n    // Checks to see if user clicked on the edit button or the cancel button\n    if (e.target.classList.contains(\"fa-edit\")) {\n      // Gets the song's unique key that was generated when uploaded to Firebase database\n      let key = e.target.parentElement.parentElement.id;\n      // Gets the new name for the song from the input element\n      let fileName = e.target.previousElementSibling.value;\n      // Set database reference to user specific folder and song that wants to be edited\n      let db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid + \"/\" + key);\n      // Sets the key \"name\" with the new song name \n      db.child(\"name\").set(fileName).then(function() {\n        console.log(\"File renamed\");\n      }).catch(function(error) {\n        console.log(\"Edit failed: \" + error.message);\n      });\n      // Hides the cancel button\n      e.target.nextElementSibling.classList.add(\"hidden\");\n      // Hides itself\n      e.target.classList.add(\"hidden\");\n      // Hides the input form\n      e.target.previousElementSibling.classList.add(\"hidden\");\n      // Reveals the span containing the new name of the song\n      e.target.previousElementSibling.previousElementSibling.classList.remove(\"hidden\");\n    }\n    else {\n      // Hides the cancel button\n      e.target.classList.add(\"hidden\");\n      // Hides the edit button\n      e.target.previousElementSibling.classList.add(\"hidden\");\n      // Hides the input form\n      e.target.previousElementSibling.previousElementSibling.classList.add(\"hidden\");\n      // Reveals the span containing the original name of the song\n      e.target.previousElementSibling.previousElementSibling.previousElementSibling.classList.remove(\"hidden\");\n    }\n\n\n  }\n\n  delete(e) {\n    // Gets the song name that needs to be deleted\n    let fileName = e.target.title;\n    // Gets the unique key for the song from the <li> element\n    let key = e.target.parentElement.parentElement.id;\n    // Sets database and storage reference\n    const fileRef = fire.storage().ref(fire.auth().currentUser.uid + \"/\" + fileName);\n    const db = fire.database().ref(\"users/\" + fire.auth().currentUser.uid + \"/\" + key);\n    // Removes the reference in the database and then removes the file from the storage\n    db.remove().then(function() {\n      fileRef.delete().then(function() {\n        console.log(\"File Deleted!\");\n      }).catch(function(error) {\n        console.log(\"Remove file failed: \" + error.message)\n      })\n    }).catch(function(error) {\n      console.log(\"Remove db failed: \" + error.message);\n    });\n    fire.database().ref(\"likes/\" + key).remove().then(function() {\n      console.log(\"Likes removed\");\n    }).catch(function(error) {\n      console.log(\"Remove likes failed: \" + error.message);\n    })\n    \n  }\n\n  like(e) {\n    let key = e.target.parentElement.parentElement.id;\n    let songName = e.target.parentElement.parentElement.getAttribute(\"name\");\n    const db = fire.database().ref(\"likes/\" + key);\n    // Check if it hasnt been liked yet, then like it\n    if (e.target.classList.contains(\"fa-thumbs-o-up\")) {\n      e.target.classList.remove(\"fa-thumbs-o-up\");\n      e.target.classList.add(\"fa-thumbs-up\");\n      db.child(fire.auth().currentUser.uid).set(songName).then(function() {\n        console.log(\"Liked\");\n      }).catch(function(error) {\n        console.log(\"Cannot like: \" + error.message);\n      });\n\n    }\n    // If it has already been liked by user, unlike\n    else {\n      e.target.classList.remove(\"fa-thumbs-up\");\n      e.target.classList.add(\"fa-thumbs-o-up\");\n      db.child(fire.auth().currentUser.uid).remove().then(function() {\n        console.log(\"Unliked\");\n      }).catch(function(error) {\n        console.log(\"Cannot unlike: \" + error.message);\n      })\n    }\n  }\n\n  handleSearch(e) {\n    // Gets the input value in the search bar dynamically\n    let search = $(\"#search\").val();\n    // Sets state of filtered from this.state.audio with song names that only match the search query\n    // Code from https://stackoverflow.com/questions/36326612/delete-item-from-state-array-in-react\n    this.setState({\n      filtered: this.state.audio.filter(function(song) { \n        if (song.name.toLowerCase().includes(search)) {\n          return song\n        }\n\n    })});\n  }\n\n  render() {\n    // Code to display loading while data is being fetched from https://stackoverflow.com/questions/55359176/handling-undefined-null-properties-in-components-during-first-render\n    if (this.state.isLoading) {\n      return <h2>Loading...</h2>\n    }\n    // Code to display uploading while file is being uploaded to storage\n    if (this.state.isUploading) {\n      return <h2>Uploading...</h2>\n    }\n\n    // console.log(this.state.audio);\n    // console.log(this.state.filtered);\n    return (\n      <div className=\"container\">\n        {/* Main title and logout button */}\n        <div className=\"page-header\">\n          <h1>React Player</h1>\n          <button onClick={this.logout} id=\"logout\" className=\"btn btn-success\">Logout</button>\n        </div >\n        {/* Upload file elements */}\n        <div className=\"row\">\n          <input type=\"text\" id=\"search\" defaultValue=\"\" onChange={this.handleSearch} placeholder=\"    Search\" />\n          <input type=\"file\" id=\"fileUpload\" onChange={(e) => {this.onChangeFile(e.target.files)}} />\n          <button onClick={this.upload} className=\"btn btn-primary\">Upload</button>\n        </div>\n  \n        <div className=\"row\">\n          <ul>\n            {/* List of music files that will be displayed with titles, user who uploaded it, a music player with mutliple functions, and an edit or delete function for user's own music files */}\n              {this.state.filtered.map((song, index) => {\n                // Code for conditional rendering from https://stackoverflow.com/questions/44969877/if-condition-inside-of-map-react\n                // Checks if logged in user owns these files\n                  if (song.parent === fire.auth().currentUser.uid) {\n                    // Check if anyone liked this song\n                    if (this.state.likes[song.key] === undefined) {\n                      return <React.Fragment key={index}>\n                      <li className=\"audioFile\" id={song.key} name={song.name}>\n                        <Like title={song.name} onClick={this.like} numLikes={0} />\n                        <div className=\"songName\">\n                          <span className=\"name\" onClick={this.handleEdit}>{song.name}</span>\n                          <input className=\"editName hidden\" type=\"text\" defaultValue={song.name}/>\n                          <i className=\"fa fa-edit hidden\" onClick={this.edit} title={song.name}/>\n                          <i className=\"fa fa-times hidden\" onClick={this.edit} />\n                          <br/>\n                          <span className=\"uploadedBy\">Uploaded by: {song.user}</span>\n                        </div>\n                        {/* Audio player component */}\n                        <Audio title={song.name} src={song.url} user={song.parent} />\n                        {/* Delete button component */}\n                        <Delete onClick={this.delete} title={song.original} />\n                      </li>\n                      </React.Fragment>\n                    }\n                    else {\n                      // Check if currently logged in user liked this song so it can render with the like button already clicked\n                      if (this.state.likes[song.key].includes(fire.auth().currentUser.uid)) {\n                        return <React.Fragment key={index}>\n                        <li className=\"audioFile\" id={song.key} name={song.name}>\n                          <Liked title={song.name} onClick={this.like} numLikes={this.state.likes[song.key].length} />\n                          <div className=\"songName\">\n                            <span className=\"name\" onClick={this.handleEdit}>{song.name}</span>\n                            <input className=\"editName hidden\" type=\"text\" defaultValue={song.name}/>\n                            <i className=\"fa fa-edit hidden\" onClick={this.edit} title={song.name}/>\n                            <i className=\"fa fa-times hidden\" onClick={this.edit} />\n                            <br/>\n                            <span className=\"uploadedBy\">Uploaded by: {song.user}</span>\n                          </div>\n                          {/* Audio player component */}\n                          <Audio title={song.name} src={song.url} user={song.parent} />\n                          {/* Delete button component */}\n                          <Delete onClick={this.delete} title={song.original} />\n                        </li>\n                        </React.Fragment>\n                      }\n                      // Renders without like button being clicked\n                      else {\n                        return <React.Fragment key={index}>\n                        <li className=\"audioFile\" id={song.key} name={song.name}>\n                          <Like title={song.name} onClick={this.like} numLikes={this.state.likes[song.key].length} />\n                          <div className=\"songName\">\n                            <span className=\"name\" onClick={this.handleEdit}>{song.name}</span>\n                            <input className=\"editName hidden\" type=\"text\" defaultValue={song.name}/>\n                            <i className=\"fa fa-edit hidden\" onClick={this.edit} title={song.name}/>\n                            <i className=\"fa fa-times hidden\" onClick={this.edit} />\n                            <br/>\n                            <span className=\"uploadedBy\">Uploaded by: {song.user}</span>\n                          </div>\n                          {/* Audio player component */}\n                          <Audio title={song.name} src={song.url} user={song.parent} />\n                          {/* Delete button component */}\n                          <Delete onClick={this.delete} title={song.original} />\n                        </li>\n                        </React.Fragment>\n                      }\n                        \n                      \n                    }\n                  }\n                  // Renders music without option to edit or delete\n                  else {\n                    // Check if anyone has already liked this song\n                    if (this.state.likes[song.key] === undefined) {\n                      // Returns the music file without edit or delete function because user does not own these files \n                      return <React.Fragment key={index}>\n                      <li className=\"audioFile\" id={song.key} name={song.name}>\n                        <Like title={song.name} onClick={this.like} numLikes={0} />\n                        <div className=\"songName\"><span className=\"name\">{song.name}</span><br/><span className=\"uploadedBy\">Uploaded by: {song.user}</span></div>\n                        <Audio title={song.name} src={song.url} user={song.parent} />\n                        <div className=\"empty\" />\n                      </li>\n                      </React.Fragment>\n                    }  \n                    else {\n                      // Check if currently logged in user has liked this song before so it can render like button already clicked\n                      if (this.state.likes[song.key].includes(fire.auth().currentUser.uid)) {\n                        // Returns the music file without edit or delete function because user does not own these files \n                        return <React.Fragment key={index}>\n                        <li className=\"audioFile\" id={song.key} name={song.name}>\n                          <Liked title={song.name} onClick={this.like} numLikes={this.state.likes[song.key].length}/>\n                          <div className=\"songName\"><span className=\"name\">{song.name}</span><br/><span className=\"uploadedBy\">Uploaded by: {song.user}</span></div>\n                          <Audio title={song.name} src={song.url} user={song.parent} />\n                          <div className=\"empty\" />\n                        </li>\n                        </React.Fragment>\n                      }\n                      else {\n                        // Returns the music file without edit or delete function because user does not own these files \n                        return <React.Fragment key={index}>\n                        <li className=\"audioFile\" id={song.key} name={song.name}>\n                          <Like title={song.name} onClick={this.like} numLikes={this.state.likes[song.key].length}/>\n                          <div className=\"songName\"><span className=\"name\">{song.name}</span><br/><span className=\"uploadedBy\">Uploaded by: {song.user}</span></div>\n                          <Audio title={song.name} src={song.url} user={song.parent} />\n                          <div className=\"empty\" />\n                        </li>\n                        </React.Fragment>\n                      }\n                        \n                      \n                    }\n                    \n                  }\n                    \n                })\n              }\n              \n          </ul>\n          \n        </div>\n        </div>\n    );\n  }\n\n  // Lists all music files and likes regardless of current user\n  getAudio() {\n    let current = this;\n    // Iterates through each user's database and gets information about every music file\n    fire.database().ref(\"users\").on(\"value\", function(snapshot) {\n      let audio = [];\n      snapshot.forEach(function(users) {\n        users.forEach(function(file) {\n          // Pushes each music file's info into array audio\n          audio.push({name: file.val().name, url: file.val().url, key: file.val().key, parent: file.val().parent, user: file.val().user, original: file.val().original});\n          // Sets state with new info\n          current.setState({audio: audio});\n          current.setState({filtered: audio});\n        })\n\n      })\n      // This function gets an array of who liked which music\n      fire.database().ref(\"likes\").on(\"value\", function(snapshot) {\n        let likes = {};\n        snapshot.forEach(function(file) {\n          // Sets music key as dictionary key with array of users as values\n          likes[file.key] = Object.keys(file.val())});\n          // console.log(likes);\n          // Set state\n          current.setState({likes: likes});\n        })\n        // console.log(current.state.likes);\n        // console.log(current.state.audio);\n        current.setState({isLoading: false});\n      });\n    };\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}